Allow optional build with atasmart, polkit, acl and libsystemd-login.

Upstream-Status: Inappropriate [embedded specific]

Signed-off-by: Yevhen Kyriukha <kirgene@gmail.com>
---
 configure.ac                |  120 ++++++++++++++++++++++++++++---------------
 data/Makefile.am            |    2 +
 src/udisksdaemon.c          |    8 +++
 src/udisksdaemon.h          |    2 +
 src/udisksdaemontypes.h     |    4 ++
 src/udisksdaemonutil.c      |    7 +++
 src/udiskslinuxdriveata.c   |   12 +++++
 src/udiskslinuxfilesystem.c |    6 +++
 tools/udisksctl.c           |   55 +++++++++++++++-----
 9 files changed, 161 insertions(+), 55 deletions(-)

diff --git a/configure.ac b/configure.ac
index dda6dce..f521a31 100644
--- a/configure.ac
+++ b/configure.ac
@@ -30,14 +30,6 @@ AC_PROG_LIBTOOL
 
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 
-# Initialization
-#
-
-GNOME_COMMON_INIT
-GNOME_DEBUG_CHECK
-GNOME_COMPILE_WARNINGS([maximum])
-GNOME_MAINTAINER_MODE_DEFINES
-
 # Compilation
 #
 
@@ -133,29 +125,59 @@ PKG_CHECK_MODULES(GIO, [gio-unix-2.0 >= 2.31.13])
 AC_SUBST(GIO_CFLAGS)
 AC_SUBST(GIO_LIBS)
 
-PKG_CHECK_MODULES(POLKIT_GOBJECT_1, [polkit-gobject-1 >= 0.92])
-AC_SUBST(POLKIT_GOBJECT_1_CFLAGS)
-AC_SUBST(POLKIT_GOBJECT_1_LIBS)
-
-PKG_CHECK_MODULES(POLKIT_AGENT_1, [polkit-agent-1 >= 0.92])
-AC_SUBST(POLKIT_AGENT_1_CFLAGS)
-AC_SUBST(POLKIT_AGENT_1_LIBS)
-
-PKG_CHECK_MODULES(LIBATASMART, [libatasmart >= 0.17])
-AC_SUBST(LIBATASMART_CFLAGS)
-AC_SUBST(LIBATASMART_LIBS)
-
-PKG_CHECK_MODULES(LIBSYSTEMD_LOGIN,
-                  [libsystemd-login >= 44 libsystemd-daemon],
-                  have_libsystemd_login=yes,
-                  have_libsystemd_login=no)
-AM_CONDITIONAL(HAVE_LIBSYSTEMD_LOGIN, test x$have_libsystemd_login = xyes)
-if test "x$have_libsystemd_login" = "xyes"; then
-  AC_DEFINE([HAVE_LIBSYSTEMD_LOGIN], 1, [Define to 1 if libsystemd-login is available])
+have_polkit=no
+AC_ARG_ENABLE(poolkit, AS_HELP_STRING([--disable-polkit], [disable polkit support]))
+if test "x$enable_polkit" != "xno"; then
+  have_polkit_gobject=no
+  have_polkit_agent=no
+  PKG_CHECK_MODULES(POLKIT_GOBJECT_1, [polkit-gobject-1 >= 0.92],
+          have_polkit_gobject=yes, have_polkit_gobject=no)
+  AC_SUBST(POLKIT_GOBJECT_1_CFLAGS)
+  AC_SUBST(POLKIT_GOBJECT_1_LIBS)
+
+  PKG_CHECK_MODULES(POLKIT_AGENT_1, [polkit-agent-1 >= 0.92],
+          have_polkit_agent=yes, have_polkit_agent=no)
+  AC_SUBST(POLKIT_AGENT_1_CFLAGS)
+  AC_SUBST(POLKIT_AGENT_1_LIBS)
+
+  if test "x$have_polkit_gobject" = xyes -a "x$have_polkit_agent" = xyes; then
+    have_polkit=yes
+    AC_DEFINE(HAVE_POLKIT, 1, [Define if polkit is available])
+  fi
+  if test "x$have_polkit" = xno -a "x$enable_polkit" = xyes; then
+    AC_MSG_ERROR([polkit support requested but libraries not found])
+  fi
+fi
+AM_CONDITIONAL(HAVE_POLKIT, [test "$have_polkit" = "yes"])
+
+have_libatasmart=no
+AC_ARG_ENABLE(libatasmart, AS_HELP_STRING([--disable-libatasmart], [disable libatasmart support]))
+if test "x$enable_libatasmart" != "xno"; then
+  PKG_CHECK_MODULES(LIBATASMART, [libatasmart >= 0.14],
+          [AC_DEFINE(HAVE_LIBATASMART, 1, [Define if libatasmart is available]) have_libatasmart=yes],
+          have_libatasmart=no)
+  AC_SUBST(LIBATASMART_CFLAGS)
+  AC_SUBST(LIBATASMART_LIBS)
+  if test "x$have_libatasmart" = xno -a "x$enable_libatasmart" = xyes; then
+    AC_MSG_ERROR([libatasmart support requested but libraries not found])
+  fi
+fi
+AM_CONDITIONAL(HAVE_LIBATASMART, [test "$have_libatasmart" = "yes"])
+
+have_libsystemd_login=no
+AC_ARG_ENABLE(libsystemd_login, AS_HELP_STRING([--disable-libsystemd-login], [disable libsystemd-login support]))
+if test "x$enable_libsystemd_login" != "xno"; then
+  PKG_CHECK_MODULES(LIBSYSTEMD_LOGIN,
+          [libsystemd-login >= 44 libsystemd-daemon],
+          [AC_DEFINE(HAVE_LIBSYSTEMD_LOGIN, 1, [Define if libsystemd-login is available]) have_libsystemd_login=yes],
+          have_libsystemd_login=no)
+  AC_SUBST(LIBSYSTEMD_LOGIN_CFLAGS)
+  AC_SUBST(LIBSYSTEMD_LOGIN_LIBS)
+  if test "x$have_libsystemd_login" = xno -a "x$enable_libsystemd_login" = xyes; then
+    AC_MSG_ERROR([libsystemd-login support requested but libraries not found])
+  fi
 fi
-AC_SUBST(HAVE_LIBSYSTEMD_LOGIN)
-AC_SUBST(LIBSYSTEMD_LOGIN_CFLAGS)
-AC_SUBST(LIBSYSTEMD_LOGIN_LIBS)
+AM_CONDITIONAL(HAVE_LIBSYSTEMD_LOGIN, test x$have_libsystemd_login = xyes)
 
 # udevdir
 AC_ARG_WITH([udevdir],
@@ -175,17 +197,30 @@ fi
 AM_CONDITIONAL(HAVE_SYSTEMD, [test -n "$systemdsystemunitdir"])
 
 # libacl
-AC_CHECK_HEADERS(
-        [sys/acl.h acl/libacl.h],
-        [ACL_CFLAGS=""],
-        AC_MSG_ERROR([*** ACL headers not found.]))
-AC_CHECK_LIB(
-        [acl],
-        [acl_get_file],
-        [ACL_LIBS="-lacl"],
-        AC_MSG_ERROR([*** libacl not found.]))
-AC_SUBST(ACL_CFLAGS)
-AC_SUBST(ACL_LIBS)
+have_acl=no
+AC_ARG_ENABLE(acl, AS_HELP_STRING([--disable-acl], [disable acl support]))
+if test "x$enable_acl" != "xno"; then
+  AC_CHECK_HEADERS(
+          [sys/acl.h acl/libacl.h],
+          [
+            AC_CHECK_LIB(
+                [acl],
+                [acl_get_file],
+                [AC_DEFINE(HAVE_ACL, 1, [Define if libacl is available]) have_acl=yes],
+                have_acl=no)
+          ],
+          have_acl=no)
+  if test "x$have_acl" = "xyes"; then
+    ACL_CFLAGS=""
+    ACL_LIBS="-lacl"
+  fi
+  AC_SUBST(ACL_CFLAGS)
+  AC_SUBST(ACL_LIBS)
+  if test "x$have_acl" = xno -a "x$enable_acl" = xyes; then
+    AC_MSG_ERROR([acl support requested but libraries not found])
+  fi
+fi
+AM_CONDITIONAL(HAVE_ACL, [test "$have_acl" = "yes"])
 
 # Internationalization
 #
@@ -232,6 +267,9 @@ echo "
         udevdir:                    ${udevdir}
         systemdsystemunitdir:       ${systemdsystemunitdir}
         using libsystemd-login:     ${have_libsystemd_login}
+        libatasmart support:        ${have_libatasmart}
+        acl support:                ${have_acl}
+        polkit support:             ${have_polkit}
 
         compiler:                   ${CC}
         cflags:                     ${CFLAGS}
diff --git a/data/Makefile.am b/data/Makefile.am
index 0921698..bf8c8b3 100644
--- a/data/Makefile.am
+++ b/data/Makefile.am
@@ -28,9 +28,11 @@ endif
 udevrulesdir = $(udevdir)/rules.d
 udevrules_DATA = 80-udisks2.rules
 
+if HAVE_POLKIT
 polkitdir        = $(datadir)/polkit-1/actions
 polkit_in_files  = org.freedesktop.udisks2.policy.in
 polkit_DATA      = $(polkit_in_files:.policy.in=.policy)
+endif
 
 completionsdir = $(datadir)/bash-completion/completions
 completions_DATA = 					\
diff --git a/src/udisksdaemon.c b/src/udisksdaemon.c
index 6f194ae..842d7d9 100644
--- a/src/udisksdaemon.c
+++ b/src/udisksdaemon.c
@@ -65,8 +65,10 @@ struct _UDisksDaemon
 
   UDisksLinuxProvider *linux_provider;
 
+#ifdef HAVE_POLKIT
   /* may be NULL if polkit is masked */
   PolkitAuthority *authority;
+#endif
 
   UDisksState *state;
 
@@ -100,7 +102,9 @@ udisks_daemon_finalize (GObject *object)
   udisks_state_stop_cleanup (daemon->state);
   g_object_unref (daemon->state);
 
+#ifdef HAVE_POLKIT
   g_clear_object (&daemon->authority);
+#endif
   g_object_unref (daemon->object_manager);
   g_object_unref (daemon->linux_provider);
   g_object_unref (daemon->mount_monitor);
@@ -190,6 +194,7 @@ udisks_daemon_constructed (GObject *object)
   GError *error;
 
   error = NULL;
+#ifdef HAVE_POLKIT
   daemon->authority = polkit_authority_get_sync (NULL, &error);
   if (daemon->authority == NULL)
     {
@@ -197,6 +202,7 @@ udisks_daemon_constructed (GObject *object)
                     error->message, g_quark_to_string (error->domain), error->code);
       g_error_free (error);
     }
+#endif
 
   daemon->object_manager = g_dbus_object_manager_server_new ("/org/freedesktop/UDisks2");
 
@@ -418,12 +424,14 @@ udisks_daemon_get_linux_provider (UDisksDaemon *daemon)
  * authority is not available. Do not free, the object is owned by
  * @daemon.
  */
+#ifdef HAVE_POLKIT
 PolkitAuthority *
 udisks_daemon_get_authority (UDisksDaemon *daemon)
 {
   g_return_val_if_fail (UDISKS_IS_DAEMON (daemon), NULL);
   return daemon->authority;
 }
+#endif
 
 /**
  * udisks_daemon_get_state:
diff --git a/src/udisksdaemon.h b/src/udisksdaemon.h
index 6005e91..6bf3bd1 100644
--- a/src/udisksdaemon.h
+++ b/src/udisksdaemon.h
@@ -37,7 +37,9 @@ UDisksMountMonitor       *udisks_daemon_get_mount_monitor     (UDisksDaemon    *
 UDisksFstabMonitor       *udisks_daemon_get_fstab_monitor     (UDisksDaemon    *daemon);
 UDisksCrypttabMonitor    *udisks_daemon_get_crypttab_monitor  (UDisksDaemon    *daemon);
 UDisksLinuxProvider      *udisks_daemon_get_linux_provider    (UDisksDaemon    *daemon);
+#ifdef HAVE_POLKIT
 PolkitAuthority          *udisks_daemon_get_authority         (UDisksDaemon    *daemon);
+#endif
 UDisksState              *udisks_daemon_get_state             (UDisksDaemon    *daemon);
 
 /**
diff --git a/src/udisksdaemontypes.h b/src/udisksdaemontypes.h
index 398581c..d8439ad 100644
--- a/src/udisksdaemontypes.h
+++ b/src/udisksdaemontypes.h
@@ -22,7 +22,11 @@
 #define __UDISKS_DAEMON_TYPES_H__
 
 #include <gio/gio.h>
+
+#ifdef HAVE_POLKIT
 #include <polkit/polkit.h>
+#endif
+
 #include <udisks/udisks.h>
 #include <gudev/gudev.h>
 
diff --git a/src/udisksdaemonutil.c b/src/udisksdaemonutil.c
index 574bf2c..c8625c0 100644
--- a/src/udisksdaemonutil.c
+++ b/src/udisksdaemonutil.c
@@ -426,6 +426,7 @@ udisks_daemon_util_setup_by_user (UDisksDaemon *daemon,
  *
  * http://cgit.freedesktop.org/polkit/commit/?h=wip/js-rule-files&id=224f7b892478302dccbe7e567b013d3c73d376fd
  */
+#ifdef HAVE_POLKIT
 static void
 _safe_polkit_details_insert (PolkitDetails *details, const gchar *key, const gchar *value)
 {
@@ -495,6 +496,7 @@ check_authorization_no_polkit (UDisksDaemon          *daemon,
  out:
   return ret;
 }
+#endif
 
 /**
  * udisks_daemon_util_check_authorization_sync:
@@ -540,6 +542,7 @@ udisks_daemon_util_check_authorization_sync (UDisksDaemon          *daemon,
                                              const gchar           *message,
                                              GDBusMethodInvocation *invocation)
 {
+#ifdef HAVE_POLKIT
   PolkitAuthority *authority = NULL;
   PolkitSubject *subject = NULL;
   PolkitDetails *details = NULL;
@@ -752,10 +755,14 @@ udisks_daemon_util_check_authorization_sync (UDisksDaemon          *daemon,
   g_clear_object (&details);
   g_clear_object (&result);
   return ret;
+#else
+  return TRUE;
+#endif
 }
 
 /* ---------------------------------------------------------------------------------------------------- */
 
+
 /**
  * udisks_daemon_util_get_caller_uid_sync:
  * @daemon: A #UDisksDaemon.
diff --git a/src/udiskslinuxdriveata.c b/src/udiskslinuxdriveata.c
index 48cc6e6..30407d6 100644
--- a/src/udiskslinuxdriveata.c
+++ b/src/udiskslinuxdriveata.c
@@ -36,7 +36,9 @@
 #include <glib/gstdio.h>
 #include <errno.h>
 
+#ifdef HAVE_LIBATASMART
 #include <atasmart.h>
+#endif
 
 #include "udiskslogging.h"
 #include "udiskslinuxprovider.h"
@@ -346,6 +348,7 @@ typedef struct
   gint num_attributes_failed_in_the_past;
 } ParseData;
 
+#ifdef HAVE_LIBATASMART
 static void
 parse_attr_cb (SkDisk                           *d,
                const SkSmartAttributeParsedData *a,
@@ -426,6 +429,7 @@ selftest_status_to_string (SkSmartSelfTestExecutionStatus status)
     }
   return ret;
 }
+#endif
 
 /**
  * udisks_linux_drive_ata_refresh_smart_sync:
@@ -456,6 +460,7 @@ udisks_linux_drive_ata_refresh_smart_sync (UDisksLinuxDriveAta  *drive,
                                            GCancellable         *cancellable,
                                            GError              **error)
 {
+#ifdef HAVE_LIBATASMART
   UDisksLinuxDriveObject *object;
   UDisksLinuxDevice *device = NULL;
   gboolean ret = FALSE;
@@ -610,6 +615,9 @@ udisks_linux_drive_ata_refresh_smart_sync (UDisksLinuxDriveAta  *drive,
     sk_disk_free (d);
   g_clear_object (&object);
   return ret;
+#else
+  return TRUE;
+#endif
 }
 
 /* ---------------------------------------------------------------------------------------------------- */
@@ -636,6 +644,7 @@ udisks_linux_drive_ata_smart_selftest_sync (UDisksLinuxDriveAta     *drive,
                                             GCancellable            *cancellable,
                                             GError                 **error)
 {
+#ifdef HAVE_LIBATASMART
   UDisksLinuxDriveObject  *object;
   UDisksLinuxDevice *device;
   SkDisk *d = NULL;
@@ -692,6 +701,9 @@ udisks_linux_drive_ata_smart_selftest_sync (UDisksLinuxDriveAta     *drive,
     sk_disk_free (d);
   g_clear_object (&object);
   return ret;
+#else
+  return TRUE;
+#endif
 }
 
 /* ---------------------------------------------------------------------------------------------------- */
diff --git a/src/udiskslinuxfilesystem.c b/src/udiskslinuxfilesystem.c
index 4c8d8aa..98c3d44 100644
--- a/src/udiskslinuxfilesystem.c
+++ b/src/udiskslinuxfilesystem.c
@@ -29,7 +29,9 @@
 #include <stdio.h>
 #include <mntent.h>
 #include <sys/types.h>
+#ifdef HAVE_ACL
 #include <sys/acl.h>
+#endif
 #include <errno.h>
 
 #include <glib/gstdio.h>
@@ -790,6 +792,7 @@ ensure_utf8 (const gchar *s)
 
 /* ---------------------------------------------------------------------------------------------------- */
 
+#ifdef HAVE_ACL
 static gboolean
 add_acl (const gchar  *path,
          uid_t         uid,
@@ -825,6 +828,7 @@ add_acl (const gchar  *path,
     acl_free (acl);
   return ret;
 }
+#endif
 
 /*
  * calculate_mount_point: <internal>
@@ -914,6 +918,7 @@ calculate_mount_point (UDisksDaemon              *daemon,
                            mount_dir);
               goto out;
             }
+#ifdef HAVE_ACL
           /* Finally, add the read+execute ACL for $USER */
           if (!add_acl (mount_dir, uid, error))
             {
@@ -921,6 +926,7 @@ calculate_mount_point (UDisksDaemon              *daemon,
                 udisks_warning ("Error calling rmdir() on %s: %m", mount_dir);
               goto out;
             }
+#endif
         }
     }
   /* otherwise fall back to mounting in /media */
diff --git a/tools/udisksctl.c b/tools/udisksctl.c
index 97b0f17..eaac6a4 100644
--- a/tools/udisksctl.c
+++ b/tools/udisksctl.c
@@ -35,9 +35,11 @@
 
 #include <locale.h>
 
+#ifdef HAVE_POLKIT
 #include <polkit/polkit.h>
 #define POLKIT_AGENT_I_KNOW_API_IS_SUBJECT_TO_CHANGE
 #include <polkitagent/polkitagent.h>
+#endif
 
 static UDisksClient *client = NULL;
 static GMainLoop *loop = NULL;
@@ -58,6 +60,7 @@ static void modify_argv0_for_command (gint *argc, gchar **argv[], const gchar *c
 
 /* ---------------------------------------------------------------------------------------------------- */
 
+#ifdef HAVE_POLKIT
 static PolkitAgentListener *local_polkit_agent = NULL;
 static gpointer local_agent_handle = NULL;
 
@@ -120,6 +123,7 @@ shutdown_local_polkit_agent (void)
   if (local_polkit_agent != NULL)
     g_object_unref (local_polkit_agent);
 }
+#endif
 
 
 /* ---------------------------------------------------------------------------------------------------- */
@@ -817,8 +821,11 @@ handle_command_mount_unmount (gint        *argc,
                                               &error))
         {
           if (error->domain == UDISKS_ERROR &&
-              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-              setup_local_polkit_agent ())
+              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+              && setup_local_polkit_agent ()
+#endif
+             )
             {
               g_error_free (error);
               goto try_again;
@@ -846,8 +853,11 @@ handle_command_mount_unmount (gint        *argc,
                                                 &error))
         {
           if (error->domain == UDISKS_ERROR &&
-              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-              setup_local_polkit_agent ())
+              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+              && setup_local_polkit_agent ()
+#endif
+             )
             {
               g_error_free (error);
               goto try_again;
@@ -1264,8 +1274,11 @@ handle_command_unlock_lock (gint        *argc,
                                               &error))
         {
           if (error->domain == UDISKS_ERROR &&
-              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-              setup_local_polkit_agent ())
+              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+              && setup_local_polkit_agent ()
+#endif
+             )
             {
               g_error_free (error);
               goto try_again;
@@ -1298,8 +1311,11 @@ handle_command_unlock_lock (gint        *argc,
                                             &error))
         {
           if (error->domain == UDISKS_ERROR &&
-              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-              setup_local_polkit_agent ())
+              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+              && setup_local_polkit_agent ()
+#endif
+             )
             {
               g_error_free (error);
               goto try_again;
@@ -1639,8 +1655,11 @@ handle_command_loop (gint        *argc,
       if (!rc)
         {
           if (error->domain == UDISKS_ERROR &&
-              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-              setup_local_polkit_agent ())
+              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+              && setup_local_polkit_agent ()
+#endif
+             )
             {
               g_error_free (error);
               goto setup_try_again;
@@ -1699,8 +1718,11 @@ handle_command_loop (gint        *argc,
                                          &error))
         {
           if (error->domain == UDISKS_ERROR &&
-              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-              setup_local_polkit_agent ())
+              error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+              && setup_local_polkit_agent ()
+#endif
+             )
             {
               g_error_free (error);
               goto delete_try_again;
@@ -1978,8 +2000,11 @@ handle_command_smart_simulate (gint        *argc,
                                                 &error))
     {
       if (error->domain == UDISKS_ERROR &&
-          error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN &&
-          setup_local_polkit_agent ())
+          error->code == UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN
+#ifdef HAVE_POLKIT
+          && setup_local_polkit_agent ()
+#endif
+         )
         {
           g_error_free (error);
           goto try_again;
@@ -3176,7 +3201,9 @@ main (int argc,
   if (client != NULL)
     g_object_unref (client);
   _color_shutdown ();
+#ifdef HAVE_POLKIT
   shutdown_local_polkit_agent ();
+#endif
   return ret;
 }
 
-- 
1.7.9.5

